// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
  id               Int               @id @default(autoincrement())
  createDate       DateTime          @default(now())
  updateDate       DateTime          @updatedAt
  filename         String            @unique
  size             Int
  hash             String            @unique
  tags             Tag[]
  sources          Url[]
  status           FileStatus        @default(inbox)
  trash            Boolean           @default(false)
  deleted          Boolean           @default(false)
  rating           Rating            @default(explicit)
  subscriptionLogs SubscriptionLog[]

  @@map("files")
}

model Tag {
  id        Int       @id @default(autoincrement())
  tag       String
  namespace Namespace
  files     File[]

  @@unique([tag, namespace])
  @@map("tags")
}

model Url {
  id     String    @id @unique @default(uuid())
  site   Site
  url    String
  status UrlStatus @default(downloaded)
  File   File[]

  @@unique([url])
  @@map("urls")
}

model Subscription {
  id           Int                @id @default(autoincrement())
  createDate   DateTime           @default(now())
  updateDate   DateTime           @updatedAt
  site         Site
  tags         String[]
  tagBlacklist String[]
  limit        Int                @default(200)
  status       SubscriptionStatus @default(active)
  interval     Interval           @default(daily)
  runs         SubscriptionRun[]
  nextRun      DateTime?          @default(now())

  @@unique(id)
  @@unique([site, tags])
  @@map("subscriptions")
}

model SubscriptionRun {
  id                 Int                @id @unique @default(autoincrement())
  createDate         DateTime           @default(now())
  updateDate         DateTime           @updatedAt
  subscription       Subscription       @relation(fields: [site, tags], references: [site, tags])
  site               Site
  tags               String[]
  status             SubscriptionStatus @default(running)
  log                SubscriptionLog[]
  pageNumber         Int                @default(1)
  downloadedUrlCount Int                @default(0)
  skippedUrlCount    Int                @default(0)
  failedUrlCount     Int                @default(0)
  finished           Boolean            @default(false)
  finishedAt         DateTime?

  @@map("runs")
}

model SubscriptionLog {
  id                String           @id @unique @default(uuid())
  subscriptionRun   SubscriptionRun? @relation(fields: [subscriptionRunId], references: [id])
  subscriptionRunId Int?
  file              File?            @relation(fields: [fileId], references: [id])
  fileId            Int?
  url               String
  status            UrlStatus
  createDate        DateTime         @default(now())
  updateDate        DateTime         @updatedAt
}

enum FileStatus {
  archived
  inbox
}

enum UrlStatus {
  downloaded
  skipped
  failed
  deleted
  exists
  blacklisted
}

enum Site {
  danbooru
  gelbooru
  pixiv
  yandere
  fanbox
  twitter
  unknown
}

enum Namespace {
  character
  creator
  series
  tag
  meta
}

enum Rating {
  safe
  questionable
  explicit
}

enum Interval {
  daily
  weekly
  monthly
}

enum SubscriptionStatus {
  active
  running
  paused
  finished
}
